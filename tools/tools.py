"""
1、 读写文件
2、 网络搜索
3、 获取当前时间
"""
import json
import os
from utils.logger import logger
from langchain_community.tools.tavily_search import TavilySearchResults
from config.config import settings

work_dir = settings.workdir_root
def read_file(file_name):
    if not os.path.exists(file_name):
        logger.error(f"文件：{file_name}不存在")
        return f"{file_name} not exist, please check the file name"
    
    # 修改这里，添加 encoding='utf-8'
    with open(file_name, "r", encoding='utf-8') as f:
        return "\n".join(f.readlines())
    
def append_to_file(file_name,content):
    if not os.path.exists(file_name):
        logger.error(f"文件：{file_name}不存在")
        return f"{file_name} not exist, please check the file name"
    
    with open(file_name,"a", encoding='utf-8') as f:
        f.write(content)
        
    return f"{file_name} append content success"

def write_to_file(file_name: str, content: str) -> str:
    # 修改这里，添加 encoding='utf-8'
    with open(file_name, "w", encoding='utf-8') as f:
        f.write(content)
        
    return f"{file_name} write content success"

def online_search(query):
    tavily = TavilySearchResults(max_results=5)
    try:
        ret = tavily.invoke(input=query)
        """
        ret格式：
        [
            {
                "content":"xxx",
                "url":"xxx",
                "title":"xxx",
                "snippet":"xxx"
            }
        ]    
        """
        content_list = [obj['content'] for obj in ret]
        logger.info(f"online_search result:{content_list}")
        return "\n".join(content_list)
       
    except Exception as e:
        logger.error(f"online_search error:{e}")
        


tools_info = [
    {
        "name":"read_file",
        "description":"read file from the agent generates, and write should before read",
        "args":[
            {
                "arg_name":"file_name",
                "type":"string",
                "description":"read file name"
            }
        ]
    },
    {
        "name":"append_to_file",
        "description":"append content to the file, only use this tool when the file are generated by you,and the file has content before",
        "args":[
            {
                "arg_name":"file_name",
                "type":"string",
                "description":"file name"
            },
            {
                "arg_name":"content",
                "type":"string",
                "description":"content to write"
            }
        ]
    },
    {
        "name":"write_to_file",
        "description":"write LLM output to the file, only use this tool when the file are generated by you and the file has no content before",
        "args":[
            {
                "arg_name":"file_name",
                "type":"string",
                "description":"file name"
            },
            {
                "arg_name":"content",
                "type":"string",
                "description":"content to write"
            }
        ]
    },
    {
        "name":"online_search",
        "description":"this is a search engine, you can use this tool to get additional knowledge from internet when you are not sure about the answer from the LLM",
        "args":[
            {
                "arg_name":"query",
                "type":"string",
                "description":"search query to look up"
            }
        ]
    },
    {
        "name": "finish",
        "description": "完成用户目标",
        "args": [
            {
                "arg_name": "answer",
                "type": "string",
                "description": "最后的目标结果"
            }
        ]
    },
    
]

tools_mapping = {
    "read_file": read_file,
    "online_search": online_search,
    "write_to_file": write_to_file,
    "append_to_file": append_to_file,
}

def gen_tools_desc():
    """
    生成工具描述
    :return:
    """
    tools_desc = []
    for idx, t in enumerate(tools_info):
        args_desc = []
        for info in t["args"]:
            args_desc.append({
                "arg_name": info["arg_name"],
                "description": info["description"],
                "type": info["type"]
            })
        args_desc = json.dumps(args_desc, ensure_ascii=False)
        tool_desc = f"{idx+1}.{t['name']}:{t['description']}, args: {args_desc}"
        tools_desc.append(tool_desc)
    tools_prompt = "\n".join(tools_desc)
    return tools_prompt
